import { Context, MakeStore } from "next-redux-wrapper";
import { AnyAction, Middleware, Store } from "redux";
import { NextReduxCookieMiddlewareConfig } from "./config";
export { NextReduxCookieMiddlewareConfig, SubtreeConfig } from "./config";
/**
 * An action type that is dispatched internally on the server to pass the Next.js context to the
 * {@link nextReduxCookieMiddleware}.
 */
export declare const SERVE_COOKIES = "next-redux-cookie-wrapper/SERVE_COOKIES";
/**
 * A tiny wrapper for the `makeStore()` function. It sends the received Next.js context to
 * {@link nextReduxCookieMiddleware} on the server via a {@link SERVE_COOKIES} action.
 *
 * Use it like this:
 * ```ts
 * export const wrapper = createWrapper<AppStore>(wrapMakeStore(makeStore));
 * ```
 *
 * @param makeStore The `makeStore()` function for `next-redux-wrapper`
 * @returns A wrapped version of the `makeStore()` function
 */
export declare const wrapMakeStore: <S extends Store<any, AnyAction>>(makeStore: MakeStore<S>) => (context: Context) => S;
/**
 * A Redux middleware that syncs user-defined subtrees of the Redux state with cookies â€“ on the
 * server and on the client. One cookie is used per state subtree and the serialized state is, by
 * default, compressed using [lz-string](https://github.com/pieroxy/lz-string). The subtree paths,
 * cookie names, cookie options, and compression are configured via a
 * {@link NextReduxCookieMiddlewareConfig} object.
 */
export declare const nextReduxCookieMiddleware: (config: NextReduxCookieMiddlewareConfig) => Middleware;
